# -*- coding: utf-8 -*-
"""LSTM-Stock-Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10ZkIbxNyCnQw2QVoBHBWgDiZwfE7Lb02

## **Import Dependencies**
"""

import os
import pickle
import random
import warnings
import numpy as np
import pandas as pd
import seaborn as sns
import tensorflow as tf
import statsmodels.api as sm
import matplotlib.pyplot as plt
import statsmodels.tsa.stattools as ts

from tqdm import tqdm
from statsmodels.tsa.api import VAR
from statsmodels.tsa.stattools import adfuller
from statsmodels.tsa.stattools import grangercausalitytests

from keras.models import load_model
from keras.callbacks import ModelCheckpoint
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import mean_squared_error
from sklearn.model_selection import cross_val_score

warnings.filterwarnings("ignore")
pd.set_option('display.max_rows', None)
pd.set_option('display.max_columns', None)

"""## **Read the Dataset**"""

data = pd.read_csv("/content/ASII.csv")

column_to_drop = ["previous", "open_price", "first_trade", "high", "low", "delisting_date"]
data = data.drop(column_to_drop, axis=1)
data.head()

"""## **Understanding the Dataset**"""

# Check the percentage of Nan in dataset
total        = data.isnull().sum().sort_values(ascending=False)
percent      = (data.isnull().sum() / len(data)).sort_values(ascending=False)
missing_data = pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])
missing_data.head(15)

def visualize_heatmap(data):
    """
    Visualize a heatmap of the correlation matrix for the DataFrame.

    Parameters:
    - data (pd.DataFrame): The DataFrame for which the heatmap is generated.

    Returns:
    None
    """
    # Calculate the correlation matrix
    correlation_matrix = data.corr()

    # Set the size of the figure
    plt.figure(figsize=(15, 10))

    # Display the heatmap
    sns.heatmap(correlation_matrix, cmap='coolwarm', fmt='.2f', linewidths=0.5)

    # Adjust the layout
    plt.title('Heatmap of Column Correlations')
    plt.show()

# Call the function to display the heatmap
visualize_heatmap(data)

def visualize_timeframe(data, target_column="close"):
    """
    Visualize the target column using a line chart with fill between.

    Parameters:
    - df (pd.DataFrame): The DataFrame containing the data.
    - target_column (str, optional): The column to visualize. Default is target.

    Returns:
    None
    """
    # Set the size of the figure
    plt.figure(figsize=(14, 6))

    # Create a line chart for target
    plt.plot(data.index, data[target_column], label=target_column, color='blue', linestyle='-', linewidth=1)

    # Add fill between the line and the x-axis
    plt.fill_between(data.index, data[target_column], color='blue', alpha=0.2)

    # Add labels and title
    plt.xlabel('Date', fontsize=14)
    plt.ylabel(target_column, fontsize=14)

    # Add a legend
    plt.legend(fontsize=12)

    # Add a grid
    plt.grid(True, linestyle='--', alpha=0.7)

    # Adjust the layout
    plt.tight_layout()
    plt.show()

# Visualize the close price
visualize_timeframe(data)

"""## **Preprocessing the Dataset**"""

# Mengonversi kolom 'date' menjadi tipe data datetime
data['date'] = pd.to_datetime(data['date'])

# Menjadikan kolom 'date' sebagai indeks
data.set_index('date', inplace=True)
data.head()

# Inisialisasi MinMaxScaler
scaler = MinMaxScaler()

# Mengambil kolom yang akan dinormalisasi
numeric_columns = data.select_dtypes(include=['float64', 'int64']).columns.tolist()

# Melakukan normalisasi untuk kolom-kolom numerik
data[numeric_columns] = scaler.fit_transform(data[numeric_columns])
data.head()

"""## **Select Target Column**"""

data_close = data[['close']]
data_close.head()

"""## **Windowing the Dataset**"""

# Menentukan jumlah lag yang diinginkan
num_lags = 10

# Membuat kolom-kolom yang merupakan lag dari kolom 'close'
for i in range(1, num_lags + 1):
    data_close[f'lag_{i}'] = data_close['close'].shift(i)
data_close = data_close.dropna()
data_close.head()

"""## **Split the Dataset**"""

data_train = data_close[:int(0.8*len(data))]
data_test  = data_close[int(0.8*len(data)):]

print("Data train shape :", data_train.shape)
print("Data test shape  :", data_test.shape)

X_train = data_train.iloc[:, 1:]
y_train = data_train.iloc[:,0]

X_test = data_test.iloc[:, 1:]
y_test = data_test.iloc[:,0]

"""## **Build Model Architecture**"""

model = tf.keras.Sequential()
model.add(tf.keras.layers.LSTM(128, return_sequences=False, input_shape=(X_train.shape[1], 1)))
model.add(tf.keras.layers.Dense(1))
model.summary()

"""## **Train the Model**"""

# Mengkompilasi model
model.compile(optimizer='adam', loss='mean_squared_error', metrics=['mse'])

# Membuat callback untuk menyimpan model berdasarkan MSE terkecil
checkpoint = ModelCheckpoint('ASII.h5', monitor='val_mse', mode='min', save_best_only=True, verbose=1)

# Melatih model dengan menggunakan callback ModelCheckpoint
history = model.fit(X_train, y_train, epochs=100, batch_size=32, validation_data=(X_test, y_test), callbacks=[checkpoint])

# Memvisualisasikan metrik MSE pelatihan dan validasi dengan kombinasi garis dan titik
plt.figure(figsize=(6, 4))
plt.plot(history.history['mse'], linestyle='-', label='Training MSE', color='green')
plt.plot(history.history['val_mse'], linestyle='-', label='Validation MSE', color='red')

plt.title('Training and Validation MSE')
plt.xlabel('Epochs')
plt.ylabel('MSE')

plt.legend()
plt.grid(True)
plt.tight_layout()

plt.show()

"""## **Model Performance on Test Set**"""

y_test_pred = model.predict(X_test)
y_test_pred

def plot_prediction(y_true, y_pred, dataset_name):
    """
    Plot hasil prediksi dan nilai sebenarnya.

    Parameters:
    - y_true (pandas.Series): Seri nilai sebenarnya.
    - y_pred (pandas.Series): Seri hasil prediksi.
    - dataset_name (str): Nama dataset (contoh: 'Validasi' atau 'Test').

    Returns:
    - None
    """
    plt.figure(figsize=(12, 4))

    # Plot nilai sebenarnya
    plt.plot(y_true.index, y_true, label=f'Nilai Sebenarnya {dataset_name}', color='blue', alpha=0.7)

    # Plot hasil prediksi
    plt.plot(y_true.index, y_pred, label=f'Hasil Prediksi {dataset_name}', linestyle='--', color='orange')

    # Menambahkan judul dan label
    plt.title(f'Prediksi vs Nilai Sebenarnya (Set {dataset_name})', fontsize=14)
    plt.xlabel('Tanggal', fontsize=12)
    plt.ylabel('Nilai', fontsize=12)

    # Menambahkan legenda
    plt.legend(fontsize=12)

    # Menambahkan grid
    plt.grid(True, linestyle='--', alpha=0.7)

    # Menampilkan plot
    plt.show()


# Panggil fungsi plot_prediction untuk set test
plot_prediction(y_test, y_test_pred, 'Test')

"""## **Save and Load Model**"""

# Simpan model setelah pelatihan
model.save('ASII.h5')

# Memuat kembali model yang telah disimpan
model = load_model('ASII.h5')

"""## **Forecast the Future**"""

# Perulangan untuk memprediksi masa depan
steps = 100

for i in range(steps):
    # Mendapatkan indeks baru untuk baris yang akan ditambahkan
    new_dex = data_close.index[-1] + pd.DateOffset(days=1)

    # Membuat DataFrame baru dengan nilai NaN di kolom pertama dan nilai dari baris terakhir di kolom lainnya
    new_row = pd.DataFrame(
        [[np.nan, data_close['close'].iloc[-1], data_close['lag_1'].iloc[-1], data_close['lag_2'].iloc[-1],
          data_close['lag_3'].iloc[-1], data_close['lag_4'].iloc[-1], data_close['lag_5'].iloc[-1],
          data_close['lag_6'].iloc[-1], data_close['lag_7'].iloc[-1], data_close['lag_8'].iloc[-1], data_close['lag_9'].iloc[-1]]],
        columns=data_close.columns,
        index=[new_dex]
    )

    # Menambahkan baris baru ke DataFrame
    data_close = data_close.append(new_row)

    # Melakukan prediksi dengan model untuk mengisi nilai NaN
    forecast = model.predict(data_close.iloc[[-1]].drop(columns=['close']))
    data_close = data_close.fillna(forecast[0][0])

# Memilih 365 baris terakhir dari kolom 'close'
historical = data_close[['close']].iloc[-730-steps:-steps]
forecast = data_close[['close']].iloc[-steps:]

# Membuat plot untuk visualisasi data 'close'
plt.figure(figsize=(10, 3))

# Plot garis untuk data historis
plt.plot(data_train.index    , data_train['close']   , label='Training Data', color='green')
plt.plot(data_test.index     , data_test['close']    , label='Test Data'    , color='red')

# Plot garis untuk forecast dengan garis putus-putus
plt.plot(forecast.index, forecast['close'], label='Forecasted Close Price', color='blue', linestyle="--")

# Menambahkan judul dan label sumbu
plt.title('Close Price Forecast')
plt.xlabel('Date')
plt.ylabel('Close Price')
plt.legend()
plt.grid(True, alpha=0.5, zorder=10)
plt.tight_layout()

# Menampilkan plot
plt.show()